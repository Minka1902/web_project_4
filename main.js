!function(){"use strict";class e{constructor(e,t){this._form=t,this._setSettings(e)}_setSettings(e){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputs=[...this._form.querySelectorAll(this._inputSelector)]}enableValidation(){this._formSelector&&(this._form.addEventListener("submit",(e=>e.preventDefault())),this._inputs.forEach((e=>{e.addEventListener("input",(e=>{this._handleInputEvent(e.target),this.validateButton()}))})))}_handleInputEvent(e){const t=e.parentElement.querySelector(".".concat(e.id,"-error"));this._checkInputValidity(e)?(this._hideErrorMessage(t,this._errorClass),e.classList.remove(this._inputErrorClass)):(this._showErrorMessage(t,this._errorClass),e.classList.add(this._inputErrorClass))}_checkFormValidity(){let e=!0;for(let t=0;t<this._inputs.length;t++)this._checkInputValidity(this._inputs[t])||(e=!1);return e}_hideErrorMessage(e){e.classList.remove(this._errorClass)}_showErrorMessage(e){e.classList.add(this._errorClass)}validateButton(){this._checkFormValidity()?this.toggleButtonState(!0):this.toggleButtonState(!1)}_checkInputValidity(e){return e.validity.valid}toggleButtonState(e){e?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}}class t{constructor(e){var t,s;s=e=>{"Escape"==e.code&&this.close(this._element.classList[1])},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._isOpen=!1,this._element=document.querySelector(e)}open(){this._isOpen=!0,document.addEventListener("keydown",this._handleEscClose),this._element.classList.add("popup_opened")}close(){this._isOpen=!1,this._element&&this._element.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}querySelector(e){return this._element.querySelector(e)}checkIfOpened(){return this._isOpen}setEventListeners(){this._element.querySelector(".popup__close-button").addEventListener("click",(e=>{this.close(e.target.closest(".popup").classList[1])})),this._element.addEventListener("mousedown",(e=>{e.target.classList.contains("popup_opened")&&this.close(e.target.classList[1])}))}}class s extends t{constructor(e,t){super(e),this._submit=t,this._form=this._element.querySelector(".popup__form"),this._inputs=this._element.querySelectorAll(".popup__input"),this._button=this._element.querySelector(".popup__button")}close(e){super.close(),e||this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{this._button.textContent="Saving...",this._submit(e)}))}}function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e,t,s,n,r,o,a,l,c){i(this,"handleClick",(e=>{this._owner._id===this._user.id&&(this._deleteCard(),e.deleteCard(this._cardId).then((()=>{this._confirmPopup.close()})).finally((()=>{this._confirmPopup.querySelector(".popup__button").textContent="Yes"})).catch((e=>{console.log(e)})),this._confirmPopup.querySelector(".popup__button").textContent="Deleting...")})),i(this,"_setEventListeners",(e=>{this._likeButton=this._element.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.contains("info__card_like-button_state_active")||(this._justClicked=!0),this._checkLikes(e)})),this._cardDelete.addEventListener("click",(()=>{this._confirmPopup.open(this.handleClick,e)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({url:this._link,caption:this._name})}))})),this._cardTemplate=e,this._name=t,this._link=s,this._cardId=n,this._likes=r,this._handleImageClick=o,this._confirmPopup=a,this._owner=l,this._user=c}generateCard(e){return this._createCard(),this._setEventListeners(e),this._toggleLikes(),this._element}_createCard(){this._element=this._getTemplate();const e=this._element;return this._cardImage=e.querySelector(".card__image"),e.querySelector(".card__text").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt="A view of ".concat(this._name),this._likeNumber=this._element.querySelector(".card__like-number"),this._likeNumber.textContent=this.getLikeNumber(),e}_setCardLikes(){this._likeNumber.textContent=this.getLikeNumber()}_getTemplate(){const e=document.querySelector(this._cardTemplate).content.querySelector(".card").cloneNode(!0);return this._cardDelete=e.querySelector(".card__delete"),this._owner&&this._owner._id!==this._user.id&&this._cardDelete.classList.add("card__delete_hidden"),e}getLikeNumber(){return this._likes?this._likes.length:0}_isLiked(){for(let e=0;e<this._likes.length;e++)return this._likes[e]._id===this._user.id}_checkLikes(e){this._justClicked?(this._likes&&(this._likes[this._likes.length]=this._user),e.addLike(this._cardId).then((()=>{this._likeNumber.textContent=this.getLikeNumber(),this._likeButton.classList.add("info__card_like-button_state_active")})),this._justClicked=!1):e.removeLike(this._cardId).then((e=>{this._likes=e.likes,this._likeNumber.textContent=this.getLikeNumber(),this._likeButton.classList.remove("info__card_like-button_state_active")})).catch((e=>{console.log(e)})),this._setCardLikes()}_toggleLikes(){if(this._likes)for(let e=0;e<this._likes.length;e++)this._likes[e]._id===this._user.id&&this._likeButton.classList.add("info__card_like-button_state_active")}_deleteCard(){this._element.remove()}}const r=new class{constructor(e){let{name:t,job:s,avatar:i}=e;this._about=document.querySelector(s),this._name=document.querySelector(t),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._name.textContent,job:this._about.textContent,avatar:this._avatar.src}}createMe(e){this.me=e,this.id=e._id}getMe(){return this.me}setUserInfo(e){this._about.textContent=e.about,this._name.textContent=e.name,e.avatar&&(this._avatar.src=e.avatar)}setUserUrl(e){this._avatar.src=e}}({name:".profile__name",job:".profile__about-me",avatar:".profile__avatar"}),o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__image-button"),c=new s(".popup_profile",(function(e){e.preventDefault();const t={name:y.value,about:C.value};r.setUserInfo(t),S.changeUserInfo(y,C).finally((()=>{c.querySelector(".popup__button").textContent="Save"})).catch((e=>{console.log(e)})),q()})),h=new class extends t{constructor(e,t){super(e),this._button=this._element.querySelector(t),this._isOpen=!1}open(e,t){super.open(),this._api=t,this._handleClick=e,this._button.addEventListener("click",(()=>{this._handleClick(this._api)}))}close(){super.close(),this._button.removeEventListener("click",(()=>{this._handleClick(this._api)}))}}(".popup_confirm",".popup__button"),_=new s(".popup_add",(function(e){e.preventDefault(),S.addCard(L,E).then((e=>{B.addItem({name:L.value,link:E.value,likes:[],owner:r.getMe(),id:e._id}),m.reset()})).finally((()=>{_.querySelector(".popup__button").textContent="Save"})).catch((e=>{console.log(e)})),v.toggleButtonState(!1),w()})),u=new s(".popup_avatar",(function(e){e.preventDefault(),r.setUserUrl(g.value),S.changeAvatar(g).finally((()=>{u.querySelector(".popup__button").textContent="Save"})).catch((e=>{console.log(e)})),U()})),d=new class extends t{constructor(e,t,s){var i,n;super(e),n=e=>{let{caption:t,url:s}=e;super.open(),this._image.setAttribute("src",s),this._image.setAttribute("alt",t),this._element.querySelector(".popup__text").textContent=t},(i="open")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this.open=n,this._url=t,this._caption=s,this._image=this._element.querySelector(".popup__image")}}(".popup_image"),p=document.getElementById("editform"),m=document.getElementById("addform"),k={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_invalid",inputErrorClass:"popup__input_type_error",errorClass:"popup__error-massage_visible"},b=new e(k,document.getElementById("avatarform")),v=new e(k,m),f=new e(k,p),g=document.getElementById("avatar"),y=document.getElementById("popupname"),C=document.getElementById("popupaboutme"),L=document.getElementById("title"),E=document.getElementById("imagelink"),S=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():"Error ".concat(e.status)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:{authorization:this._headers.authorization}}).then((e=>this._checkResponse(e)))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:{authorization:this._headers.authorization}}).then((e=>this._checkResponse(e)))}addLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._headers.authorization}}).then((e=>this._checkResponse(e)))}removeLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._headers.authorization}}).then((e=>this._checkResponse(e)))}addCard(e,t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e.value,link:t.value})}).then((e=>this._checkResponse(e)))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._headers.authorization}}).then((e=>this._checkResponse(e)))}changeAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e.value})}).then((e=>this._checkResponse(e)))}changeUserInfo(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e.value,about:t.value})}).then((e=>this._checkResponse(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"614bb6fa-36a6-4d24-9b95-72bf17bccf61","Content-Type":"application/json"}}),I=[],B=new class{constructor(e,t,s){let{items:i,renderer:n}=e;this._renderer=n,this._items=i,this._api=s,this._element=document.querySelector(t)}addItem(e){const t=this._renderer(e,this._api);this._element.prepend(t)}render(){for(let e=0;e<this._items.length;e++)this.addItem(this._items[e])}}({items:I,renderer:function(e,t){return new n("#cardtemplate",e.name,e.link,e.id,e.likes,x,h,e.owner,r).generateCard(t)}},".cards",S);function q(){if(c.checkIfOpened())c.close();else{c.open();const{name:e,job:t}=r.getUserInfo();y.value=e,C.value=t}}function w(){_.checkIfOpened()?_.close(!0):_.open()}function U(){u.checkIfOpened()?u.close():u.open()}function x(e){let{url:t,caption:s}=e;d.open({url:t,caption:s})}c.setEventListeners(),h.setEventListeners(),_.setEventListeners(),u.setEventListeners(),d.setEventListeners(),b.enableValidation(),v.enableValidation(),f.enableValidation(),a.addEventListener("click",w),o.addEventListener("click",q),l.addEventListener("click",U),Promise.all([S.getUserInfo(),S.getInitialCards()]).then((e=>{let[t,s]=e;const i={};r.createMe(t),i.name=t.name,i.about=t.about,i.avatar=t.avatar,r.setUserInfo(i);for(let e=0;e<s.length;e++){const t=s.length-1,i={name:s[t-e].name,link:s[t-e].link,id:s[t-e]._id,likes:s[t-e].likes,owner:s[t-e].owner};I[e]=i}B.render()})).catch((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,